#!/usr/bin/env python3

import base64
import getpass
import hashlib
import io
import json
import os
import pathlib
import platform
import sys
import ssl
import tarfile
import urllib.error
import urllib.request

if platform.machine() == "amd64":
  download = "https://dl.influxdata.com/telegraf/releases/telegraf-1.22.1_freebsd_amd64.tar.gz"
  signature = "deb942eb3b9e26e4279bbf1220eb34a359df34e63d2ae40fa03198177613faba"
else:
  download = "https://dl.influxdata.com/telegraf/releases/telegraf-1.22.1_freebsd_i386.tar.gz"
  signature = "0da97f3420dd5790855dd51a83a88f63309d8664b86c8a396599c7ddf1d2d5b5"

dir = pathlib.Path(__file__).parent.absolute()

def create_binary(blob):
  path = os.path.join(dir, "telegraf")
  with open(path, "wb") as file:
    file.write(blob)

  st = os.stat(path)
  os.chmod(path, st.st_mode | 0o111)

def create_init_command(command, api_key, host="localhost", username="root"):
  commands = do_request("http://%s/api/v2.0/initshutdownscript/" % host, method="GET", api_key=api_key)

  for cmd in commands:
    if cmd["command"] == command:
      print_msg("command already exists, skipping")
      return

  payload = {
    "command": command,
    "comment": "Start Telegraf",
    "enabled": True,
    "timeout": 30,
    "type": "COMMAND",
    "when": "POSTINIT",
  }

  do_request("http://%s/api/v2.0/initshutdownscript/" % host, method="POST", data=json.dumps(payload).encode("ASCII"), content_type="application/json", api_key=api_key)

def do_request(url, api_key, data=None, method="GET", content_type=None):
  auth = "Bearer %s" % api_key

  req = urllib.request.Request("https://localhost/api/v2.0/initshutdownscript/", data=data, method=method)
  req.add_header("Authorization", auth)

  if content_type:
    req.add_header("Content-Type", content_type)

  try:
    res = urllib.request.urlopen(req, context=ssl._create_unverified_context())
  except urllib.error.HTTPError as err:
    if err.code == 401:
      print_msg("Wrong API key")
      return
    elif err.code == 500:
      print_msg("Server error")
      return
    else:
      raise

  return json.load(res)

def print_msg(message):
  sys.stdout.write("%s\n" % message)
  sys.stdout.flush()

print_msg("Downloading %s" % download)

with urllib.request.urlopen(download) as archive:
  blob = archive.read()
  hash = hashlib.sha256()
  hash.update(blob)

  if signature != hash.hexdigest():
    print_msg("Signature did not match '%s'" % signature)
    exit(1)

  tar = tarfile.open(fileobj=io.BytesIO(blob), mode="r:gz")
  for member in tar.getmembers():
    if member.name.endswith("/usr/bin/telegraf"):
      with tar.extractfile(member) as binary:
        create_binary(binary.read())

print_msg("Extracted telegraf binary")

init_file = os.path.join(dir, "telegraf.init")
rc_file = "/usr/local/etc/rc.d/telegraf"
command = "ln -s %s %s; service telegraf start" % (init_file, rc_file)
manual_msg = "Skipping, you will have add the following as an Post Init Command in the Web UI:\n\n%s\n" % command

try:
  os.symlink(init_file, rc_file)
except FileExistsError:
  print_msg("%s symlink already exists" % rc_file)

print_msg("Creating init command, you need to enter a valid API key. If you don't want to do this, press Ctrl+C or enter a blank key")

try:
  api_key = getpass.getpass("API key: ")
  if api_key == "":
    print_msg(manual_msg)
  else:
    create_init_command(command, api_key)
except KeyboardInterrupt:
  print_msg("\n%s" % manual_msg)

print_msg("Run 'service telegraf start' after you create %s/telegraf.conf" % dir)
